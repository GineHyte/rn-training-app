// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  plans     Plan[]
  exercises Exercise[]

  @@map("users")
}

model Plan {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime
  public    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeks     PlanWeek[]

  @@map("plans")
}

model PlanWeek {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  planId    Int
  plan      Plan           @relation(fields: [planId], references: [id], onDelete: Cascade)
  trainings PlanTraining[]

  @@map("plan_weeks")
}

model PlanTraining {
  id         Int      @id @default(autoincrement())
  name       String
  startTime  DateTime
  endTime    DateTime
  intensity  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  planWeekId Int
  planWeek   PlanWeek       @relation(fields: [planWeekId], references: [id], onDelete: Cascade)
  exercises  PlanExercise[]
  trainings  Training[]

  @@map("plan_trainings")
}

model PlanExercise {
  id        Int      @id @default(autoincrement())
  intensity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  planTrainingId        Int
  planTraining          PlanTraining            @relation(fields: [planTrainingId], references: [id], onDelete: Cascade)
  exerciseId            Int
  exercise              Exercise                @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  trainingExercises     TrainingExercise[]
  decliningExercises    DecliningTrainingExercise[]

  @@map("plan_exercises")
}

model Exercise {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  video       String?
  image       String?
  public      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  planExercises PlanExercise[]

  @@map("exercises")
}

model Training {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  planTrainingId    Int
  planTraining      PlanTraining       @relation(fields: [planTrainingId], references: [id], onDelete: Cascade)
  trainingExercises TrainingExercise[]

  @@map("trainings")
}

model TrainingExercise {
  id        Int      @id @default(autoincrement())
  reps      Int
  kgs       Float
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  trainingId     Int
  training       Training     @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  planExerciseId Int
  planExercise   PlanExercise @relation(fields: [planExerciseId], references: [id], onDelete: Cascade)

  @@map("training_exercises")
}

model DecliningTrainingExercise {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  planExerciseId Int
  planExercise   PlanExercise                       @relation(fields: [planExerciseId], references: [id], onDelete: Cascade)
  positions      DecliningTrainingExercisePosition[]

  @@map("declining_training_exercises")
}

model DecliningTrainingExercisePosition {
  id        Int      @id @default(autoincrement())
  kgs       Float
  reps      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  decliningExerciseId Int
  decliningExercise   DecliningTrainingExercise @relation(fields: [decliningExerciseId], references: [id], onDelete: Cascade)

  @@map("declining_training_exercise_positions")
}
